# UFT 2.0 

#高性能解决方案

## 一、UFT 2.0 结构介绍


### 1. 1 产生背景

其原始模型是经纪事业部的VIP系统，VIP是调用数据库的接口进行交易，这样和数据库的频繁交易，势必对性能有影响。

到了期货UFT1.0 、资管UFT1.1 阶段，行程了小型的内存数据库。进一步发展到证券UFT2.0 。

由于内存不能持久化，宕机之后所有的数据都会荡然无存，为了保证其高可用性，就开发了恒生UFT2.0

![](UFT%202.0/14C7D047-32AD-4599-92B1-9F543471B4B2.png)

#### 1.2. 业务需求

经纪：支持证券、两融、期货、期权

资管：完善的投资管理平台、丰富的投资策略、多样的交易方式

风险管理：支持各政策、法规、风险内控要求，规避恶意或者误操作引起的投资风险。

技术需求：
1. 低延时：尤其是期货，交易时间相对集中，交易指令相对密集
2. 高可用：异地多中心保障
3. 易扩展：实现指令、通道松耦合
4. 可反演：反演回顾业务流程


### 1.3 平台特性

*高效性：*
1. 采用内存数据库
2. 组播插件使用穿透模式
3. 交易/查询核心分开部署
4. 关键节点支持冗余备份
5. 排队机支持日志反演
6. 系统节点通过可靠组播实现同步
7. 插件部署可拆可合
8. 部署方式多样
9. 基于恒生金融基础件平台开发


### 1.4 核心技术

*核心技术：*
1. 内存数据库
2. 可靠组播
3. 排队机制
4. 双活机制
5. 开发套件
6. 插件化

### 1.5 平台架构


![](UFT%202.0/7E5E95D7-206C-4E50-81AC-4C8970B28B89.png)

#### 1.5.1 前置节点：
1. 管理前置
2. 交易前置
3. 行情前置

#### 1.5.2 排队机
1. 排队机
2. 仲裁机代理
3. 仲裁机
我们的排队机有主备之分

#### 1.5.3 核心节点：
1. 查询核心
2. 交易核心
内存数据库就是加载在核心节点里面的，我们看到架构图中包括了查询核心和交易核心。每个核心有自己的内存数据库，而且每个核心的数据库都是一致的，如果在交易过程中有查询请求过来的话。业务请求分为查询请求和交易请求。

#### 1.5.4 辅助服务
1. 日志服务
2. 同步服务
3. 监控服务
4. 初始化服务

#### 1.5.5 流水线介绍

以期货极速交易为例：

三类请求：
1. 投资者终端送入业务请求
2. 交易前置转发业务请求到排队机
3. 排队机转发业务请求到交易/查询核心
4. 交易/查询核心返回业务应答
5. 交易前置转发业务应答给投资者终端
6. 交易核心订单发给报盘机
7. 报盘机向交易所申报订单
8. 交易所反馈订单确认/撮合结果
9. 报盘机转发顶点确认/撮合结果
10.  排队机转发订单确认/撮合结果
11. 交易/查询核心发布订单确认/撮合结果
12. 交易前置返回订单确认/撮合结果
13. 交易行情信息发布
14. 行情服务器转发行情信息
15. 排队机转发布行情信息给交易/查询核心行情前置发布行情信息给投资者终端


![](UFT%202.0/A4C3320A-6372-4E1D-BBF8-94B1B7E82126.png)



### 1. 6 各服务功能介绍

1. 初始化服务：保证数据初始化的准确性与及时性，主要负责日初把数据从柜台下载下来，然后组播给排队机
2. 前置机：接入层，接受esb请求，转化为组播包，发给排队机，接受从交易核心发送组播应答，转化为ESB包
3. 排队机：对接收的报文进行排序，支持主备模式防止单点故障，支持重演，
4. 仲裁机：作为总指挥决定被仲裁的插件的状态，
5. 交易核心：支持mSQL和Oracle数据库
6. 组播网关：接收核心组播数据，并转化为F2请求
7. 交易日志：将收到的组播包保存到日志中，用于排队机重演

### 1.7 部署方案

![](UFT%202.0/6CDFC1E3-4C80-421B-BDBA-44B4143A565B.png)

1. 标准部署，适合交易场景
2. 极速部署，适合事前风控
3. 精简部署，适合适合清算场景

![](UFT%202.0/80E2FEAC-57B9-4D0C-9578-45C51E067852.png)

阴影部分：在实际部署过程中，交易核心与排队机都是在一起部署的，因为组播的穿透模式可以更快的传递消息

![](UFT%202.0/A778D2D1-6D53-40E2-A516-23B744823D87.png)

排队机只有一个，没有仲裁机。都是在风控上用。

![](UFT%202.0/00646107-F537-4A1A-9CC2-B842C8E18C72.png)

更加精简，主要是为了做到极速清算。清算场景对数据安全性不是很高，所以不需要重演，组播等机制。甚至接入AR可以不要，其实我们的核心上也可以


![](UFT%202.0/C17C2E1F-893D-4094-A998-BECA4F9342C9.png)

主备机房通过同步插件进行同步数据，在UFT环境出现问题时就可以保持数据的同步不会丢失

## 2. UFT 2.0 安装和升级

### 2.1 运行环境

* 操作系统：64bit Linux（推荐RedHat 6.5）。6.5以上有一些bug
* 内存：128G。 
* 硬盘：500G。 日志和组播数据保存在磁盘中。
* CPU：交易场景要求在3.2GHz，CPU个数不需要多。对于清算和风控对主频要求不高，CPU数量要多，需要多线程
* 网卡：万兆网卡
* 交换机：万兆网卡


### 2.2 环境设置

1. 调整Linux运行级别；将操作系统调整为命令行模式，我们所有的启动和关闭都是使用命令行操作的。
2. 防火墙设置：UFT 大量使用组播、F2、T2等，绑定了端口，需要对防火墙进行设置
3. 操作系统限制修改：排队机会使用大量的消息队列，需要调整系统对消息队列限制的宽松一些
4. 排队机共享内存大小修改：排队机的状态等数据都是在共享内存中，所以需要调大点。当服务器内存小于16G的时候，共享内存设置为17G，当服务器内存大于16G的时候，一般是80%+1G
5. 服务器性能优化：关闭无用的服务，CPU节能模式

### 2.3 交换机配置

![](UFT%202.0/0F755648-FD89-4068-8A0E-564187812B8B.png)

在很多情况下，组播报文不可避免的要经过交换机，为了节省系统资源，设置交换机，将组播MAC地址和端口建立映射关系。一般来说网络工程师会很清楚

### 2.4 平台安装

在研发中心网站下载

## 3. 初始化插件

### 3.1 插件介绍

插件ID：hsuftini
插件库：libfsc_uftinit.so
插件类型：流水线插件

### 3.2 基本功能

该插件用于给UFT初始化数据。

![](UFT%202.0/436B4221-705C-4A0E-AA8E-E2F9984F0947.png)


### 3.3 功能号介绍




